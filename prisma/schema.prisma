// prisma/schema.prisma
// Prisma schema for admin permissions and UI optimization

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin User model
model AdminUser {
  id                           String      @id @default(uuid())
  email                       String      @unique
  name                        String
  passwordHash                String
  isActive                    Boolean     @default(true)
  roleIds                     String[]
  createdAt                   DateTime    @default(now())
  lastLogin                   DateTime?
  personalizationSettings     Json?
  lastAccessedResource        String?
  lastAccessedResourceLockTime DateTime?
  
  // Relations
  roles                       Role[]      @relation("AdminUserRoles")
  auditLogs                   AuditLog[]  @relation("AdminUserAuditLogs")
  resourceLocks               ResourceLock[] @relation("AdminUserResourceLocks")
  userPersonalizations        UserPersonalization[] @relation("AdminUserPersonalizations")
}

// Role model
model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  permissionIds String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  isActive    Boolean   @default(true)
  
  // Relations
  adminUsers  AdminUser[] @relation("AdminUserRoles")
  permissions Permission[] @relation("RolePermissions")
}

// Permission model
model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  category    String
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  
  // Relations
  roles       Role[]   @relation("RolePermissions")
}

// Audit Log model
model AuditLog {
  id              String   @id @default(uuid())
  userId          String
  action          String
  resourceType    String
  resourceId      String
  timestamp       DateTime @default(now())
  ipAddress       String
  userAgent       String?
  sessionId       String
  actionOutcome   String
  beforeValue     Json?
  afterValue      Json?
  metadata        Json?
  
  // Relations
  adminUser       AdminUser @relation("AdminUserAuditLogs", fields: [userId], references: [id])
}

// Resource Lock model
model ResourceLock {
  id                String   @id @default(uuid())
  resourceType      String
  resourceId        String
  lockedBy          String
  lockAcquiredAt    DateTime @default(now())
  lockExpiresAt     DateTime
  isActive          Boolean  @default(true)
  
  // Relations
  adminUser         AdminUser @relation("AdminUserResourceLocks", fields: [lockedBy], references: [id])
  
  @@unique([resourceType, resourceId, isActive])
}

// User Personalization model
model UserPersonalization {
  id                  String   @id @default(uuid())
  userId              String   @unique
  dashboardLayout     Json?
  themeSettings       Json?
  widgetPreferences   Json?
  navigationPreferences Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  adminUser           AdminUser @relation("AdminUserPersonalizations", fields: [userId], references: [id])
}